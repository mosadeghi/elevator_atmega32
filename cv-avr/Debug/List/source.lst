
AVRASM ver. 2.1.30  D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm Mon Jul 10 01:15:30 2023

D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1089): warning: Register r4 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1091): warning: Register r6 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1095): warning: Register r10 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1097): warning: Register r12 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _current_state=R5
                 	.DEF _height_from_ground=R4
                 	.DEF _current_floor=R7
                 	.DEF _door_open_degree=R6
                 	.DEF _open_door_wait=R9
                 	.DEF _inferared_trigered=R8
                 	.DEF _heavy_weight=R11
                 	.DEF _alarm=R10
                 	.DEF _destination_height=R13
                 	.DEF _destination_set=R12
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 01ff 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002a 0300
00002b 0000      	.DB  0x0,0x3,0x0,0x0
00002c 0000
00002d 0000      	.DB  0x0,0x0,0x0,0x0
00002e 1e00      	.DB  0x0,0x1E
                 
                 _0x3:
00002f 0a00
000030 1e14      	.DB  0x0,0xA,0x14,0x1E
                 _0x4:
D:\Data\Desktop\elevator_atmega32\cv-avr\Debug\List\source.asm(1137): warning: .cseg .db misalignment - padding zero byte
000031 0001      	.DB  0x1
                 _0x5:
000032 063f
000033 4f5b      	.DB  0x3F,0x6,0x5B,0x4F
                 
                 __GLOBAL_INI_TBL:
000034 000a      	.DW  0x0A
000035 0004      	.DW  0x04
000036 0054      	.DW  __REG_VARS*2
                 
000037 0004      	.DW  0x04
000038 0260      	.DW  _destination_heights
000039 005e      	.DW  _0x3*2
                 
00003a 0001      	.DW  0x01
00003b 0267      	.DW  _monitor_on
00003c 0062      	.DW  _0x4*2
                 
00003d 0004      	.DW  0x04
00003e 026d      	.DW  _seg_code
00003f 0064      	.DW  _0x5*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 021d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#define OFF 0
                 ;#define UP 1
                 ;#define DOWN 2
                 ;#define OPEN 1
                 ;#define CLOSE 2
                 ;
                 ;#define NOT_BLINKING 0
                 ;#define BLINKING 1
                 ;
                 ;unsigned char current_state = 3;
                 ;//0: door should open
                 ;//1: waiting before door close
                 ;//2: closing the door
                 ;//3: waiting for request
                 ;//4: moving to request
                 ;
                 ;unsigned char height_from_ground = 0;
                 ;unsigned char current_floor = 0;
                 ;unsigned char door_open_degree = 0; // 0: close 20:full open
                 ;unsigned char open_door_wait = 0;
                 ;
                 ;unsigned char inferared_trigered = 0;
                 ;unsigned char heavy_weight = 0;
                 ;unsigned char alarm = 0;
                 ;
                 ;unsigned char destination_heights[4] = {0, 10, 20, 30};
                 
                 	.DSEG
                 ;char destination_height = 30;
                 ;char destination_set = 0;
                 ;
                 ;unsigned char current_door_motor_mode = OFF;
                 ;unsigned char current_elevator_motor_mode = OFF;
                 ;unsigned char monitor_blinking = NOT_BLINKING;
                 ;unsigned char monitor_on = 1;
                 ;unsigned char blink_time = 0;
                 ;
                 ;unsigned char requested[4] = {0, 0, 0, 0};
                 ;unsigned char seg_code[4] = {0b00111111, 0b00000110, 0b01011011, 0b01001111};
                 ;
                 ;void read_inferared(){
                 ; 0000 0029 void read_inferared(){
                 
                 	.CSEG
                 _read_inferared:
                 ; .FSTART _read_inferared
                 ; 0000 002A     if (PINA.0 == 0){
00006e 99c8      	SBIC 0x19,0
00006f c002      	RJMP _0x6
                 ; 0000 002B         inferared_trigered = 1;
000070 e0e1      	LDI  R30,LOW(1)
000071 2e8e      	MOV  R8,R30
                 ; 0000 002C     }
                 ; 0000 002D }
                 _0x6:
000072 9508      	RET
                 ; .FEND
                 ;
                 ;void read_alarm(){
                 ; 0000 002F void read_alarm(){
                 _read_alarm:
                 ; .FSTART _read_alarm
                 ; 0000 0030     if (PINA.1 == 0){
000073 99c9      	SBIC 0x19,1
000074 c002      	RJMP _0x7
                 ; 0000 0031         alarm = 1;
000075 e0e1      	LDI  R30,LOW(1)
000076 2eae      	MOV  R10,R30
                 ; 0000 0032     }
                 ; 0000 0033 }
                 _0x7:
000077 9508      	RET
                 ; .FEND
                 ;
                 ;void read_heavyweight(){
                 ; 0000 0035 void read_heavyweight(){
                 _read_heavyweight:
                 ; .FSTART _read_heavyweight
                 ; 0000 0036     if (PINA.2 == 0){
000078 99ca      	SBIC 0x19,2
000079 c002      	RJMP _0x8
                 ; 0000 0037         heavy_weight = 1;
00007a e0e1      	LDI  R30,LOW(1)
00007b 2ebe      	MOV  R11,R30
                 ; 0000 0038     }
                 ; 0000 0039 }
                 _0x8:
00007c 9508      	RET
                 ; .FEND
                 ;
                 ;void read_buttons(){
                 ; 0000 003B void read_buttons(){
                 _read_buttons:
                 ; .FSTART _read_buttons
                 ; 0000 003C     if (PINC.0 == 0 || PINC.1 == 0 || PINC.2 == 0 || PINC.3 == 0){
00007d 9b98      	SBIS 0x13,0
00007e c006      	RJMP _0xA
00007f 9b99      	SBIS 0x13,1
000080 c004      	RJMP _0xA
000081 9b9a      	SBIS 0x13,2
000082 c002      	RJMP _0xA
000083 999b      	SBIC 0x13,3
000084 c015      	RJMP _0x9
                 _0xA:
                 ; 0000 003D         if (PINC.0 == 0){
000085 9998      	SBIC 0x13,0
000086 c003      	RJMP _0xC
                 ; 0000 003E             requested[0] = 1;
000087 e0e1      	LDI  R30,LOW(1)
000088 93e0 0269 	STS  _requested,R30
                 ; 0000 003F         }
                 ; 0000 0040         if (PINC.1 == 0){
                 _0xC:
00008a 9999      	SBIC 0x13,1
00008b c003      	RJMP _0xD
                 ; 0000 0041             requested[1] = 1;
00008c e0e1      	LDI  R30,LOW(1)
                +
00008d 93e0 026a+STS _requested + ( 1 ) , R30
                 	__PUTB1MN _requested,1
                 ; 0000 0042         }
                 ; 0000 0043         if (PINC.2 == 0){
                 _0xD:
00008f 999a      	SBIC 0x13,2
000090 c003      	RJMP _0xE
                 ; 0000 0044             requested[2] = 1;
000091 e0e1      	LDI  R30,LOW(1)
                +
000092 93e0 026b+STS _requested + ( 2 ) , R30
                 	__PUTB1MN _requested,2
                 ; 0000 0045         }
                 ; 0000 0046         if (PINC.3 == 0){
                 _0xE:
000094 999b      	SBIC 0x13,3
000095 c003      	RJMP _0xF
                 ; 0000 0047             requested[3] = 1;
000096 e0e1      	LDI  R30,LOW(1)
                +
000097 93e0 026c+STS _requested + ( 3 ) , R30
                 	__PUTB1MN _requested,3
                 ; 0000 0048         }
                 ; 0000 0049     }
                 _0xF:
                 ; 0000 004A     else {
000099 c014      	RJMP _0x10
                 _0x9:
                 ; 0000 004B         if (PINC.4 == 0){
00009a 999c      	SBIC 0x13,4
00009b c003      	RJMP _0x11
                 ; 0000 004C             requested[0] = 1;
00009c e0e1      	LDI  R30,LOW(1)
00009d 93e0 0269 	STS  _requested,R30
                 ; 0000 004D         }
                 ; 0000 004E         if (PINC.5 == 0){
                 _0x11:
00009f 999d      	SBIC 0x13,5
0000a0 c003      	RJMP _0x12
                 ; 0000 004F             requested[1] = 1;
0000a1 e0e1      	LDI  R30,LOW(1)
                +
0000a2 93e0 026a+STS _requested + ( 1 ) , R30
                 	__PUTB1MN _requested,1
                 ; 0000 0050         }
                 ; 0000 0051         if (PINC.6 == 0){
                 _0x12:
0000a4 999e      	SBIC 0x13,6
0000a5 c003      	RJMP _0x13
                 ; 0000 0052             requested[2] = 1;
0000a6 e0e1      	LDI  R30,LOW(1)
                +
0000a7 93e0 026b+STS _requested + ( 2 ) , R30
                 	__PUTB1MN _requested,2
                 ; 0000 0053         }
                 ; 0000 0054         if (PINC.7 == 0){
                 _0x13:
0000a9 999f      	SBIC 0x13,7
0000aa c003      	RJMP _0x14
                 ; 0000 0055             requested[3] = 1;
0000ab e0e1      	LDI  R30,LOW(1)
                +
0000ac 93e0 026c+STS _requested + ( 3 ) , R30
                 	__PUTB1MN _requested,3
                 ; 0000 0056         }
                 ; 0000 0057     }
                 _0x14:
                 _0x10:
                 ; 0000 0058 }
0000ae 9508      	RET
                 ; .FEND
                 ;
                 ;void elevator_motor(int mode){
                 ; 0000 005A void elevator_motor(int mode){
                 _elevator_motor:
                 ; .FSTART _elevator_motor
                 ; 0000 005B     unsigned char a;
                 ; 0000 005C     unsigned char b;
                 ; 0000 005D     if (mode == OFF){
0000af d185      	RCALL SUBOPT_0x0
                 ;	mode -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0000b0 f419      	BRNE _0x15
                 ; 0000 005E         a = 0;
0000b1 e010      	LDI  R17,LOW(0)
                 ; 0000 005F         b = 0;
0000b2 e000      	LDI  R16,LOW(0)
                 ; 0000 0060     }
                 ; 0000 0061     else{
0000b3 c00f      	RJMP _0x16
                 _0x15:
                 ; 0000 0062         if (mode == UP){
0000b4 81aa      	LDD  R26,Y+2
0000b5 81bb      	LDD  R27,Y+2+1
0000b6 9711      	SBIW R26,1
0000b7 f421      	BRNE _0x17
                 ; 0000 0063             height_from_ground++;
0000b8 9443      	INC  R4
                 ; 0000 0064             a = 1;
0000b9 e011      	LDI  R17,LOW(1)
                 ; 0000 0065             b = 0;
0000ba e000      	LDI  R16,LOW(0)
                 ; 0000 0066         }
                 ; 0000 0067         else{
0000bb c007      	RJMP _0x18
                 _0x17:
                 ; 0000 0068              if (mode == DOWN){
0000bc 81aa      	LDD  R26,Y+2
0000bd 81bb      	LDD  R27,Y+2+1
0000be 9712      	SBIW R26,2
0000bf f419      	BRNE _0x19
                 ; 0000 0069                 height_from_ground--;
0000c0 944a      	DEC  R4
                 ; 0000 006A                 a = 0;
0000c1 e010      	LDI  R17,LOW(0)
                 ; 0000 006B                 a = 1;
0000c2 e011      	LDI  R17,LOW(1)
                 ; 0000 006C             }
                 ; 0000 006D         }
                 _0x19:
                 _0x18:
                 ; 0000 006E     }
                 _0x16:
                 ; 0000 006F 
                 ; 0000 0070     if (current_elevator_motor_mode != mode){
0000c3 81ea      	LDD  R30,Y+2
0000c4 81fb      	LDD  R31,Y+2+1
0000c5 91a0 0265 	LDS  R26,_current_elevator_motor_mode
0000c7 e0b0      	LDI  R27,0
0000c8 17ea      	CP   R30,R26
0000c9 07fb      	CPC  R31,R27
0000ca f069      	BREQ _0x1A
                 ; 0000 0071         PORTD.0 = a;
0000cb 3010      	CPI  R17,0
0000cc f411      	BRNE _0x1B
0000cd 9890      	CBI  0x12,0
0000ce c001      	RJMP _0x1C
                 _0x1B:
0000cf 9a90      	SBI  0x12,0
                 _0x1C:
                 ; 0000 0072         PORTD.1 = b;
0000d0 3000      	CPI  R16,0
0000d1 f411      	BRNE _0x1D
0000d2 9891      	CBI  0x12,1
0000d3 c001      	RJMP _0x1E
                 _0x1D:
0000d4 9a91      	SBI  0x12,1
                 _0x1E:
                 ; 0000 0073         current_elevator_motor_mode = mode;
0000d5 81ea      	LDD  R30,Y+2
0000d6 93e0 0265 	STS  _current_elevator_motor_mode,R30
                 ; 0000 0074     }
                 ; 0000 0075 }
                 _0x1A:
0000d8 c029      	RJMP _0x2000002
                 ; .FEND
                 ;
                 ;void door_motor(int mode){
                 ; 0000 0077 void door_motor(int mode){
                 _door_motor:
                 ; .FSTART _door_motor
                 ; 0000 0078     unsigned char a;
                 ; 0000 0079     unsigned char b;
                 ; 0000 007A     if (mode == OFF){
0000d9 d15b      	RCALL SUBOPT_0x0
                 ;	mode -> Y+2
                 ;	a -> R17
                 ;	b -> R16
0000da f419      	BRNE _0x1F
                 ; 0000 007B         a = 0;
0000db e010      	LDI  R17,LOW(0)
                 ; 0000 007C         b = 0;
0000dc e000      	LDI  R16,LOW(0)
                 ; 0000 007D     }
                 ; 0000 007E     else{
0000dd c00f      	RJMP _0x20
                 _0x1F:
                 ; 0000 007F          if (mode == OPEN){
0000de 81aa      	LDD  R26,Y+2
0000df 81bb      	LDD  R27,Y+2+1
0000e0 9711      	SBIW R26,1
0000e1 f421      	BRNE _0x21
                 ; 0000 0080             door_open_degree++;
0000e2 9463      	INC  R6
                 ; 0000 0081             a = 1;
0000e3 e011      	LDI  R17,LOW(1)
                 ; 0000 0082             b = 0;
0000e4 e000      	LDI  R16,LOW(0)
                 ; 0000 0083         }
                 ; 0000 0084         else {
0000e5 c007      	RJMP _0x22
                 _0x21:
                 ; 0000 0085                 if (mode == CLOSE){
0000e6 81aa      	LDD  R26,Y+2
0000e7 81bb      	LDD  R27,Y+2+1
0000e8 9712      	SBIW R26,2
0000e9 f419      	BRNE _0x23
                 ; 0000 0086                 door_open_degree--;
0000ea 946a      	DEC  R6
                 ; 0000 0087                 a = 0;
0000eb e010      	LDI  R17,LOW(0)
                 ; 0000 0088                 b = 1;
0000ec e001      	LDI  R16,LOW(1)
                 ; 0000 0089             }
                 ; 0000 008A         }
                 _0x23:
                 _0x22:
                 ; 0000 008B     }
                 _0x20:
                 ; 0000 008C 
                 ; 0000 008D     if (current_door_motor_mode != mode){
0000ed 81ea      	LDD  R30,Y+2
0000ee 81fb      	LDD  R31,Y+2+1
0000ef 91a0 0264 	LDS  R26,_current_door_motor_mode
0000f1 e0b0      	LDI  R27,0
0000f2 17ea      	CP   R30,R26
0000f3 07fb      	CPC  R31,R27
0000f4 f069      	BREQ _0x24
                 ; 0000 008E         PORTD.2 = a;
0000f5 3010      	CPI  R17,0
0000f6 f411      	BRNE _0x25
0000f7 9892      	CBI  0x12,2
0000f8 c001      	RJMP _0x26
                 _0x25:
0000f9 9a92      	SBI  0x12,2
                 _0x26:
                 ; 0000 008F         PORTD.3 = b;
0000fa 3000      	CPI  R16,0
0000fb f411      	BRNE _0x27
0000fc 9893      	CBI  0x12,3
0000fd c001      	RJMP _0x28
                 _0x27:
0000fe 9a93      	SBI  0x12,3
                 _0x28:
                 ; 0000 0090         current_door_motor_mode = mode;
0000ff 81ea      	LDD  R30,Y+2
000100 93e0 0264 	STS  _current_door_motor_mode,R30
                 ; 0000 0091     }
                 ; 0000 0092 }
                 _0x24:
                 _0x2000002:
000102 8119      	LDD  R17,Y+1
000103 8108      	LDD  R16,Y+0
000104 9624      	ADIW R28,4
000105 9508      	RET
                 ; .FEND
                 ;
                 ;void update_seven_segment(){
                 ; 0000 0094 void update_seven_segment(){
                 _update_seven_segment:
                 ; .FSTART _update_seven_segment
                 ; 0000 0095     if (monitor_blinking == NOT_BLINKING){
000106 91e0 0266 	LDS  R30,_monitor_blinking
000108 30e0      	CPI  R30,0
000109 f429      	BRNE _0x29
                 ; 0000 0096         monitor_on = 1;
00010a e0e1      	LDI  R30,LOW(1)
00010b 93e0 0267 	STS  _monitor_on,R30
                 ; 0000 0097         blink_time = 0;
00010d e0e0      	LDI  R30,LOW(0)
00010e c011      	RJMP _0x56
                 ; 0000 0098     }
                 ; 0000 0099     else{
                 _0x29:
                 ; 0000 009A         if (blink_time == 3){
00010f 91a0 0268 	LDS  R26,_blink_time
000111 30a3      	CPI  R26,LOW(0x3)
000112 f451      	BRNE _0x2B
                 ; 0000 009B             blink_time = 0;
000113 e0e0      	LDI  R30,LOW(0)
000114 93e0 0268 	STS  _blink_time,R30
                 ; 0000 009C             monitor_on = !monitor_on;
000116 91e0 0267 	LDS  R30,_monitor_on
000118 940e 024d 	CALL __LNEGB1
00011a 93e0 0267 	STS  _monitor_on,R30
                 ; 0000 009D         }
                 ; 0000 009E         else {
00011c c005      	RJMP _0x2C
                 _0x2B:
                 ; 0000 009F             blink_time++;
00011d 91e0 0268 	LDS  R30,_blink_time
00011f 5fef      	SUBI R30,-LOW(1)
                 _0x56:
000120 93e0 0268 	STS  _blink_time,R30
                 ; 0000 00A0         }
                 _0x2C:
                 ; 0000 00A1     }
                 ; 0000 00A2 
                 ; 0000 00A3 
                 ; 0000 00A4     if (monitor_on){
000122 91e0 0267 	LDS  R30,_monitor_on
000124 30e0      	CPI  R30,0
000125 f031      	BREQ _0x2D
                 ; 0000 00A5         PORTB = seg_code[current_floor];
000126 2de7      	MOV  R30,R7
000127 e0f0      	LDI  R31,0
000128 59e3      	SUBI R30,LOW(-_seg_code)
000129 4ffd      	SBCI R31,HIGH(-_seg_code)
00012a 81e0      	LD   R30,Z
00012b c001      	RJMP _0x57
                 ; 0000 00A6     }
                 ; 0000 00A7     else{
                 _0x2D:
                 ; 0000 00A8         PORTB = 0x00;
00012c e0e0      	LDI  R30,LOW(0)
                 _0x57:
00012d bbe8      	OUT  0x18,R30
                 ; 0000 00A9     }
                 ; 0000 00AA }
00012e 9508      	RET
                 ; .FEND
                 ;
                 ;// do
                 ;void set_destination(){
                 ; 0000 00AD void set_destination(){
                 _set_destination:
                 ; .FSTART _set_destination
                 ; 0000 00AE     signed int i_best;
                 ; 0000 00AF     signed int d = 1000;
                 ; 0000 00B0     signed int dtemp;
                 ; 0000 00B1     signed int found = 0;
                 ; 0000 00B2 
                 ; 0000 00B3     unsigned char i;
                 ; 0000 00B4     for (i=0; i<4; i++){
00012f 9723      	SBIW R28,3
000130 e0e0      	LDI  R30,LOW(0)
000131 83e9      	STD  Y+1,R30
000132 83ea      	STD  Y+2,R30
000133 940e 0286 	CALL __SAVELOCR6
                 ;	i_best -> R16,R17
                 ;	d -> R18,R19
                 ;	dtemp -> R20,R21
                 ;	found -> Y+7
                 ;	i -> Y+6
                +
000135 ee28     +LDI R18 , LOW ( 1000 )
000136 e033     +LDI R19 , HIGH ( 1000 )
                 	__GETWRN 18,19,1000
000137 83ee      	STD  Y+6,R30
                 _0x30:
000138 81ae      	LDD  R26,Y+6
000139 30a4      	CPI  R26,LOW(0x4)
00013a f530      	BRSH _0x31
                 ; 0000 00B5         if (requested[i]){
00013b 81ee      	LDD  R30,Y+6
00013c e0f0      	LDI  R31,0
00013d 59e7      	SUBI R30,LOW(-_requested)
00013e 4ffd      	SBCI R31,HIGH(-_requested)
00013f 81e0      	LD   R30,Z
000140 30e0      	CPI  R30,0
000141 f0d9      	BREQ _0x32
                 ; 0000 00B6             if (height_from_ground < destination_heights[i]){
000142 d0fa      	RCALL SUBOPT_0x1
000143 81e0      	LD   R30,Z
000144 164e      	CP   R4,R30
000145 f428      	BRSH _0x33
                 ; 0000 00B7                 dtemp = destination_heights[i] - height_from_ground;
000146 d0f6      	RCALL SUBOPT_0x1
000147 81a0      	LD   R26,Z
000148 e0b0      	LDI  R27,0
000149 2de4      	MOV  R30,R4
00014a c004      	RJMP _0x58
                 ; 0000 00B8             }
                 ; 0000 00B9             else {
                 _0x33:
                 ; 0000 00BA                 dtemp = height_from_ground - destination_heights[i];
00014b 2da4      	MOV  R26,R4
00014c 27bb      	CLR  R27
00014d d0ef      	RCALL SUBOPT_0x1
00014e 81e0      	LD   R30,Z
                 _0x58:
00014f e0f0      	LDI  R31,0
000150 1bae      	SUB  R26,R30
000151 0bbf      	SBC  R27,R31
000152 01ad      	MOVW R20,R26
                 ; 0000 00BB             }
                 ; 0000 00BC 
                 ; 0000 00BD             if (dtemp < d){
                +
000153 1742     +CP R20 , R18
000154 0753     +CPC R21 , R19
                 	__CPWRR 20,21,18,19
000155 f43c      	BRGE _0x35
                 ; 0000 00BE                 found = 1;
000156 e0e1      	LDI  R30,LOW(1)
000157 e0f0      	LDI  R31,HIGH(1)
000158 83ef      	STD  Y+7,R30
000159 87f8      	STD  Y+7+1,R31
                 ; 0000 00BF                 i_best = i;
00015a 810e      	LDD  R16,Y+6
00015b 2711      	CLR  R17
                 ; 0000 00C0                 d = dtemp;
00015c 019a      	MOVW R18,R20
                 ; 0000 00C1             }
                 ; 0000 00C2         }
                 _0x35:
                 ; 0000 00C3     }
                 _0x32:
00015d 81ee      	LDD  R30,Y+6
00015e 5fef      	SUBI R30,-LOW(1)
00015f 83ee      	STD  Y+6,R30
000160 cfd7      	RJMP _0x30
                 _0x31:
                 ; 0000 00C4     if (found == 1){
000161 81af      	LDD  R26,Y+7
000162 85b8      	LDD  R27,Y+7+1
000163 9711      	SBIW R26,1
000164 f439      	BRNE _0x36
                 ; 0000 00C5         destination_height = destination_heights[i_best];
000165 e6a0      	LDI  R26,LOW(_destination_heights)
000166 e0b2      	LDI  R27,HIGH(_destination_heights)
000167 0fa0      	ADD  R26,R16
000168 1fb1      	ADC  R27,R17
000169 90dc      	LD   R13,X
                 ; 0000 00C6         destination_set = 1;
00016a e0e1      	LDI  R30,LOW(1)
00016b 2ece      	MOV  R12,R30
                 ; 0000 00C7         return;
                 ; 0000 00C8     }
                 ; 0000 00C9 }
                 _0x36:
                 _0x2000001:
00016c 940e 028d 	CALL __LOADLOCR6
00016e 9629      	ADIW R28,9
00016f 9508      	RET
                 ; .FEND
                 ;
                 ;unsigned char closest_floor_height(){
                 ; 0000 00CB unsigned char closest_floor_height(){
                 _closest_floor_height:
                 ; .FSTART _closest_floor_height
                 ; 0000 00CC     unsigned char result = (height_from_ground / 10)*10;
                 ; 0000 00CD     if (height_from_ground < destination_height){
000170 931a      	ST   -Y,R17
                 ;	result -> R17
000171 d0d0      	RCALL SUBOPT_0x2
000172 e0aa      	LDI  R26,LOW(10)
000173 02ea      	MULS R30,R26
000174 01f0      	MOVW R30,R0
000175 2f1e      	MOV  R17,R30
000176 144d      	CP   R4,R13
000177 f408      	BRSH _0x37
                 ; 0000 00CE         result += 10;
000178 5f16      	SUBI R17,-LOW(10)
                 ; 0000 00CF     }
                 ; 0000 00D0     return result;
                 _0x37:
000179 2fe1      	MOV  R30,R17
00017a 9119      	LD   R17,Y+
00017b 9508      	RET
                 ; 0000 00D1 }
                 ; .FEND
                 ;
                 ;void time_interupt(){
                 ; 0000 00D3 void time_interupt(){
                 _time_interupt:
                 ; .FSTART _time_interupt
                 ; 0000 00D4     update_seven_segment();
00017c df89      	RCALL _update_seven_segment
                 ; 0000 00D5 
                 ; 0000 00D6     // door opening
                 ; 0000 00D7     if (current_state == 0){
00017d 2055      	TST  R5
00017e f491      	BRNE _0x38
                 ; 0000 00D8         monitor_blinking = BLINKING;
00017f e0e1      	LDI  R30,LOW(1)
000180 93e0 0266 	STS  _monitor_blinking,R30
                 ; 0000 00D9         if (door_open_degree < 20){
000182 e1e4      	LDI  R30,LOW(20)
000183 166e      	CP   R6,R30
000184 f420      	BRSH _0x39
                 ; 0000 00DA             door_motor(OPEN);
000185 e0a1      	LDI  R26,LOW(1)
000186 e0b0      	LDI  R27,0
000187 df51      	RCALL _door_motor
                 ; 0000 00DB         }
                 ; 0000 00DC         else{
000188 c007      	RJMP _0x3A
                 _0x39:
                 ; 0000 00DD             door_motor(OFF);
000189 e0a0      	LDI  R26,LOW(0)
00018a e0b0      	LDI  R27,0
00018b df4d      	RCALL _door_motor
                 ; 0000 00DE             open_door_wait = 10;
00018c e0ea      	LDI  R30,LOW(10)
00018d 2e9e      	MOV  R9,R30
                 ; 0000 00DF             current_state = 1;
00018e e0e1      	LDI  R30,LOW(1)
00018f 2e5e      	MOV  R5,R30
                 ; 0000 00E0         }
                 _0x3A:
                 ; 0000 00E1         return;
000190 9508      	RET
                 ; 0000 00E2     }
                 ; 0000 00E3 
                 ; 0000 00E4     // waiting door opened
                 ; 0000 00E5     if (current_state == 1){
                 _0x38:
000191 e0e1      	LDI  R30,LOW(1)
000192 15e5      	CP   R30,R5
000193 f441      	BRNE _0x3B
                 ; 0000 00E6         if (open_door_wait > 0){
000194 e0e0      	LDI  R30,LOW(0)
000195 15e9      	CP   R30,R9
000196 f410      	BRSH _0x3C
                 ; 0000 00E7             open_door_wait--;
000197 949a      	DEC  R9
                 ; 0000 00E8         }
                 ; 0000 00E9         else{
000198 c002      	RJMP _0x3D
                 _0x3C:
                 ; 0000 00EA             current_state = 2;
000199 e0e2      	LDI  R30,LOW(2)
00019a 2e5e      	MOV  R5,R30
                 ; 0000 00EB         }
                 _0x3D:
                 ; 0000 00EC         return;
00019b 9508      	RET
                 ; 0000 00ED     }
                 ; 0000 00EE 
                 ; 0000 00EF     // door closing
                 ; 0000 00F0     if (current_state == 2){
                 _0x3B:
00019c e0e2      	LDI  R30,LOW(2)
00019d 15e5      	CP   R30,R5
00019e f4a1      	BRNE _0x3E
                 ; 0000 00F1         read_inferared();
00019f dece      	RCALL _read_inferared
                 ; 0000 00F2         if (inferared_trigered == 1){
0001a0 e0e1      	LDI  R30,LOW(1)
0001a1 15e8      	CP   R30,R8
0001a2 f419      	BRNE _0x3F
                 ; 0000 00F3             inferared_trigered = 0;
0001a3 2488      	CLR  R8
                 ; 0000 00F4             current_state = 0;
0001a4 2455      	CLR  R5
                 ; 0000 00F5         }
                 ; 0000 00F6         else {
0001a5 c00c      	RJMP _0x40
                 _0x3F:
                 ; 0000 00F7             if(door_open_degree > 0){
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 15e6      	CP   R30,R6
0001a8 f420      	BRSH _0x41
                 ; 0000 00F8                 door_motor(CLOSE);
0001a9 e0a2      	LDI  R26,LOW(2)
0001aa e0b0      	LDI  R27,0
0001ab df2d      	RCALL _door_motor
                 ; 0000 00F9             }
                 ; 0000 00FA             else {
0001ac c005      	RJMP _0x42
                 _0x41:
                 ; 0000 00FB                 door_motor(OFF);
0001ad e0a0      	LDI  R26,LOW(0)
0001ae e0b0      	LDI  R27,0
0001af df29      	RCALL _door_motor
                 ; 0000 00FC                 current_state = 3;
0001b0 e0e3      	LDI  R30,LOW(3)
0001b1 2e5e      	MOV  R5,R30
                 ; 0000 00FD             }
                 _0x42:
                 ; 0000 00FE         }
                 _0x40:
                 ; 0000 00FF         return;
0001b2 9508      	RET
                 ; 0000 0100     }
                 ; 0000 0101 
                 ; 0000 0102     // choosing next destination
                 ; 0000 0103     if (current_state == 3){
                 _0x3E:
0001b3 e0e3      	LDI  R30,LOW(3)
0001b4 15e5      	CP   R30,R5
0001b5 f4b9      	BRNE _0x43
                 ; 0000 0104         read_alarm();
0001b6 debc      	RCALL _read_alarm
                 ; 0000 0105         read_heavyweight();
0001b7 dec0      	RCALL _read_heavyweight
                 ; 0000 0106         monitor_blinking = NOT_BLINKING;
0001b8 e0e0      	LDI  R30,LOW(0)
0001b9 93e0 0266 	STS  _monitor_blinking,R30
                 ; 0000 0107         if (alarm == 1 || heavy_weight == 1){
0001bb e0e1      	LDI  R30,LOW(1)
0001bc 15ea      	CP   R30,R10
0001bd f011      	BREQ _0x45
0001be 15eb      	CP   R30,R11
0001bf f421      	BRNE _0x44
                 _0x45:
                 ; 0000 0108             destination_height = height_from_ground;
0001c0 2cd4      	MOV  R13,R4
                 ; 0000 0109             destination_set = 1;
0001c1 e0e1      	LDI  R30,LOW(1)
0001c2 2ece      	MOV  R12,R30
                 ; 0000 010A             current_state = 4;
0001c3 c006      	RJMP _0x59
                 ; 0000 010B         }
                 ; 0000 010C         else {
                 _0x44:
                 ; 0000 010D             if (!destination_set){
0001c4 20cc      	TST  R12
0001c5 f421      	BRNE _0x48
                 ; 0000 010E                 read_buttons();
0001c6 deb6      	RCALL _read_buttons
                 ; 0000 010F                 set_destination();
0001c7 df67      	RCALL _set_destination
                 ; 0000 0110                 current_state = 3;
0001c8 e0e3      	LDI  R30,LOW(3)
0001c9 c001      	RJMP _0x5A
                 ; 0000 0111             }
                 ; 0000 0112             else{
                 _0x48:
                 ; 0000 0113                 current_state = 4;
                 _0x59:
0001ca e0e4      	LDI  R30,LOW(4)
                 _0x5A:
0001cb 2e5e      	MOV  R5,R30
                 ; 0000 0114             }
                 ; 0000 0115         }
                 ; 0000 0116         return;
0001cc 9508      	RET
                 ; 0000 0117     }
                 ; 0000 0118 
                 ; 0000 0119     // moving to next destination
                 ; 0000 011A     if (current_state == 4){
                 _0x43:
0001cd e0e4      	LDI  R30,LOW(4)
0001ce 15e5      	CP   R30,R5
0001cf f571      	BRNE _0x4A
                 ; 0000 011B         read_alarm();
0001d0 dea2      	RCALL _read_alarm
                 ; 0000 011C         read_heavyweight();
0001d1 dea6      	RCALL _read_heavyweight
                 ; 0000 011D         // update current floor
                 ; 0000 011E         if (height_from_ground % 10 == 0){
0001d2 2da4      	MOV  R26,R4
0001d3 27bb      	CLR  R27
0001d4 e0ea      	LDI  R30,LOW(10)
0001d5 e0f0      	LDI  R31,HIGH(10)
0001d6 940e 026a 	CALL __MODW21
0001d8 9730      	SBIW R30,0
0001d9 f411      	BRNE _0x4B
                 ; 0000 011F             current_floor = height_from_ground / 10;
0001da d067      	RCALL SUBOPT_0x2
0001db 2e7e      	MOV  R7,R30
                 ; 0000 0120         }
                 ; 0000 0121 
                 ; 0000 0122         if (heavy_weight == 1){
                 _0x4B:
0001dc e0e1      	LDI  R30,LOW(1)
0001dd 15eb      	CP   R30,R11
0001de f411      	BRNE _0x4C
                 ; 0000 0123             heavy_weight = 0;
0001df 24bb      	CLR  R11
                 ; 0000 0124             alarm = 1;
0001e0 2eae      	MOV  R10,R30
                 ; 0000 0125         }
                 ; 0000 0126 
                 ; 0000 0127         if (alarm == 1){
                 _0x4C:
0001e1 e0e1      	LDI  R30,LOW(1)
0001e2 15ea      	CP   R30,R10
0001e3 f419      	BRNE _0x4D
                 ; 0000 0128             destination_height = closest_floor_height();
0001e4 df8b      	RCALL _closest_floor_height
0001e5 2ede      	MOV  R13,R30
                 ; 0000 0129             alarm = 0;
0001e6 24aa      	CLR  R10
                 ; 0000 012A         }
                 ; 0000 012B 
                 ; 0000 012C         if (height_from_ground < destination_height){
                 _0x4D:
0001e7 144d      	CP   R4,R13
0001e8 f420      	BRSH _0x4E
                 ; 0000 012D             elevator_motor(UP);
0001e9 e0a1      	LDI  R26,LOW(1)
0001ea e0b0      	LDI  R27,0
0001eb dec3      	RCALL _elevator_motor
                 ; 0000 012E         }
                 ; 0000 012F         else{
0001ec c010      	RJMP _0x4F
                 _0x4E:
                 ; 0000 0130              if (height_from_ground > destination_height){
0001ed 14d4      	CP   R13,R4
0001ee f420      	BRSH _0x50
                 ; 0000 0131                 elevator_motor(DOWN);
0001ef e0a2      	LDI  R26,LOW(2)
0001f0 e0b0      	LDI  R27,0
0001f1 debd      	RCALL _elevator_motor
                 ; 0000 0132             }
                 ; 0000 0133             else {
0001f2 c00a      	RJMP _0x51
                 _0x50:
                 ; 0000 0134                 elevator_motor(OFF);
0001f3 e0a0      	LDI  R26,LOW(0)
0001f4 e0b0      	LDI  R27,0
0001f5 deb9      	RCALL _elevator_motor
                 ; 0000 0135                 requested[height_from_ground/10] = 0;// removing request
0001f6 d04b      	RCALL SUBOPT_0x2
0001f7 59e7      	SUBI R30,LOW(-_requested)
0001f8 4ffd      	SBCI R31,HIGH(-_requested)
0001f9 e0a0      	LDI  R26,LOW(0)
0001fa 83a0      	STD  Z+0,R26
                 ; 0000 0136                 destination_set = 0;// removing destination
0001fb 24cc      	CLR  R12
                 ; 0000 0137                 current_state = 0;
0001fc 2455      	CLR  R5
                 ; 0000 0138             }
                 _0x51:
                 ; 0000 0139         }
                 _0x4F:
                 ; 0000 013A         return;
0001fd 9508      	RET
                 ; 0000 013B     }
                 ; 0000 013C }
                 _0x4A:
0001fe 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void){
                 ; 0000 013F interrupt [12] void timer0_ovf_isr(void){
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0001ff 920a      	ST   -Y,R0
000200 921a      	ST   -Y,R1
000201 92fa      	ST   -Y,R15
000202 936a      	ST   -Y,R22
000203 937a      	ST   -Y,R23
000204 938a      	ST   -Y,R24
000205 939a      	ST   -Y,R25
000206 93aa      	ST   -Y,R26
000207 93ba      	ST   -Y,R27
000208 93ea      	ST   -Y,R30
000209 93fa      	ST   -Y,R31
00020a b7ef      	IN   R30,SREG
00020b 93ea      	ST   -Y,R30
                 ; 0000 0140 // Reinitialize Timer 0 value
                 ; 0000 0141    TCNT0=0x9E;
00020c e9ee      	LDI  R30,LOW(158)
00020d bfe2      	OUT  0x32,R30
                 ; 0000 0142    time_interupt();
00020e df6d      	RCALL _time_interupt
                 ; 0000 0143 }
00020f 91e9      	LD   R30,Y+
000210 bfef      	OUT  SREG,R30
000211 91f9      	LD   R31,Y+
000212 91e9      	LD   R30,Y+
000213 91b9      	LD   R27,Y+
000214 91a9      	LD   R26,Y+
000215 9199      	LD   R25,Y+
000216 9189      	LD   R24,Y+
000217 9179      	LD   R23,Y+
000218 9169      	LD   R22,Y+
000219 90f9      	LD   R15,Y+
00021a 9019      	LD   R1,Y+
00021b 9009      	LD   R0,Y+
00021c 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0147 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0148 DDRA=0x00;
00021d e0e0      	LDI  R30,LOW(0)
00021e bbea      	OUT  0x1A,R30
                 ; 0000 0149 PORTA=0xff;
00021f efef      	LDI  R30,LOW(255)
000220 bbeb      	OUT  0x1B,R30
                 ; 0000 014A 
                 ; 0000 014B DDRB=0xff;
000221 bbe7      	OUT  0x17,R30
                 ; 0000 014C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000222 e0e0      	LDI  R30,LOW(0)
000223 bbe8      	OUT  0x18,R30
                 ; 0000 014D 
                 ; 0000 014E DDRC=0x00;
000224 bbe4      	OUT  0x14,R30
                 ; 0000 014F PORTC=0xff;
000225 efef      	LDI  R30,LOW(255)
000226 bbe5      	OUT  0x15,R30
                 ; 0000 0150 
                 ; 0000 0151 DDRD=0xff;
000227 bbe1      	OUT  0x11,R30
                 ; 0000 0152 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000228 e0e0      	LDI  R30,LOW(0)
000229 bbe2      	OUT  0x12,R30
                 ; 0000 0153 
                 ; 0000 0154 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (1<<CS00);
00022a e0e5      	LDI  R30,LOW(5)
00022b bfe3      	OUT  0x33,R30
                 ; 0000 0155 TCNT0=0x9E;
00022c e9ee      	LDI  R30,LOW(158)
00022d bfe2      	OUT  0x32,R30
                 ; 0000 0156 OCR0=0x00;
00022e e0e0      	LDI  R30,LOW(0)
00022f bfec      	OUT  0x3C,R30
                 ; 0000 0157 
                 ; 0000 0158 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0159 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000230 e0e1      	LDI  R30,LOW(1)
000231 bfe9      	OUT  0x39,R30
                 ; 0000 015A 
                 ; 0000 015B // Global enable interrupts
                 ; 0000 015C #asm("sei")
000232 9478      	sei
                 ; 0000 015D 
                 ; 0000 015E while (1){
                 _0x52:
                 ; 0000 015F }
000233 cfff      	RJMP _0x52
                 ; 0000 0160 }
                 _0x55:
000234 cfff      	RJMP _0x55
                 ; .FEND
                 
                 	.DSEG
                 _destination_heights:
000260           	.BYTE 0x4
                 _current_door_motor_mode:
000264           	.BYTE 0x1
                 _current_elevator_motor_mode:
000265           	.BYTE 0x1
                 _monitor_blinking:
000266           	.BYTE 0x1
                 _monitor_on:
000267           	.BYTE 0x1
                 _blink_time:
000268           	.BYTE 0x1
                 _requested:
000269           	.BYTE 0x4
                 _seg_code:
00026d           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
000235 93ba      	ST   -Y,R27
000236 93aa      	ST   -Y,R26
000237 931a      	ST   -Y,R17
000238 930a      	ST   -Y,R16
000239 81ea      	LDD  R30,Y+2
00023a 81fb      	LDD  R31,Y+2+1
00023b 9730      	SBIW R30,0
00023c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00023d 81ee      	LDD  R30,Y+6
00023e e0f0      	LDI  R31,0
00023f 5ae0      	SUBI R30,LOW(-_destination_heights)
000240 4ffd      	SBCI R31,HIGH(-_destination_heights)
000241 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
000242 2da4      	MOV  R26,R4
000243 e0b0      	LDI  R27,0
000244 e0ea      	LDI  R30,LOW(10)
000245 e0f0      	LDI  R31,HIGH(10)
000246 940e 0265 	CALL __DIVW21
000248 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000249 95f1      	NEG  R31
00024a 95e1      	NEG  R30
00024b 40f0      	SBCI R31,0
00024c 9508      	RET
                 
                 __LNEGB1:
00024d 23ee      	TST  R30
00024e e0e1      	LDI  R30,1
00024f f009      	BREQ __LNEGB1F
000250 27ee      	CLR  R30
                 __LNEGB1F:
000251 9508      	RET
                 
                 __DIVW21U:
000252 2400      	CLR  R0
000253 2411      	CLR  R1
000254 e190      	LDI  R25,16
                 __DIVW21U1:
000255 0faa      	LSL  R26
000256 1fbb      	ROL  R27
000257 1c00      	ROL  R0
000258 1c11      	ROL  R1
000259 1a0e      	SUB  R0,R30
00025a 0a1f      	SBC  R1,R31
00025b f418      	BRCC __DIVW21U2
00025c 0e0e      	ADD  R0,R30
00025d 1e1f      	ADC  R1,R31
00025e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00025f 60a1      	SBR  R26,1
                 __DIVW21U3:
000260 959a      	DEC  R25
000261 f799      	BRNE __DIVW21U1
000262 01fd      	MOVW R30,R26
000263 01d0      	MOVW R26,R0
000264 9508      	RET
                 
                 __DIVW21:
000265 d012      	RCALL __CHKSIGNW
000266 dfeb      	RCALL __DIVW21U
000267 f40e      	BRTC __DIVW211
000268 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000269 9508      	RET
                 
                 __MODW21:
00026a 94e8      	CLT
00026b ffb7      	SBRS R27,7
00026c c004      	RJMP __MODW211
00026d 95a0      	COM  R26
00026e 95b0      	COM  R27
00026f 9611      	ADIW R26,1
000270 9468      	SET
                 __MODW211:
000271 fdf7      	SBRC R31,7
000272 dfd6      	RCALL __ANEGW1
000273 dfde      	RCALL __DIVW21U
000274 01fd      	MOVW R30,R26
000275 f40e      	BRTC __MODW212
000276 dfd2      	RCALL __ANEGW1
                 __MODW212:
000277 9508      	RET
                 
                 __CHKSIGNW:
000278 94e8      	CLT
000279 fff7      	SBRS R31,7
00027a c002      	RJMP __CHKSW1
00027b dfcd      	RCALL __ANEGW1
00027c 9468      	SET
                 __CHKSW1:
00027d ffb7      	SBRS R27,7
00027e c006      	RJMP __CHKSW2
00027f 95a0      	COM  R26
000280 95b0      	COM  R27
000281 9611      	ADIW R26,1
000282 f800      	BLD  R0,0
000283 9403      	INC  R0
000284 fa00      	BST  R0,0
                 __CHKSW2:
000285 9508      	RET
                 
                 __SAVELOCR6:
000286 935a      	ST   -Y,R21
                 __SAVELOCR5:
000287 934a      	ST   -Y,R20
                 __SAVELOCR4:
000288 933a      	ST   -Y,R19
                 __SAVELOCR3:
000289 932a      	ST   -Y,R18
                 __SAVELOCR2:
00028a 931a      	ST   -Y,R17
00028b 930a      	ST   -Y,R16
00028c 9508      	RET
                 
                 __LOADLOCR6:
00028d 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00028e 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00028f 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000290 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000291 8119      	LDD  R17,Y+1
000292 8108      	LD   R16,Y
000293 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  15 r1 :   7 r2 :   0 r3 :   0 r4 :  11 r5 :  11 r6 :   4 r7 :   2 
r8 :   3 r9 :   3 r10:   5 r11:   4 r12:   4 r13:   6 r14:   0 r15:   2 
r16:  13 r17:  20 r18:   5 r19:   4 r20:   5 r21:   3 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  52 r27:  33 r28:   4 r29:   1 r30: 175 r31:  29 
x  :   4 y  :  73 z  :  13 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  28 brpl  :   0 brsh  :   8 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   5 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  14 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  19 cpc   :   3 cpi   :   9 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   3 jmp   :  22 ld    :  20 ldd   :  30 ldi   : 107 
lds   :   7 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  21 movw  :   9 
mul   :   0 muls  :   1 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  21 pop   :   0 push  :   0 rcall :  32 ret   :  25 
reti  :   1 rjmp  :  45 rol   :   3 ror   :   0 sbc   :   2 sbci  :   5 
sbi   :   4 sbic  :  12 sbis  :   3 sbiw  :  11 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  26 std   :   7 sts   :  16 sub   :   2 subi  :   7 swap  :   0 
tst   :   3 wdr   :   0 
Instructions used: 57 out of 116 (49.1%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000528   1274     46   1320   32768   4.0%
[.dseg] 0x000060 0x000271      0     17     17    2048   0.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
